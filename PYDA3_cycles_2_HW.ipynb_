{"cells":[{"cell_type":"markdown","source":["# Домашнее задание"],"metadata":{"id":"Nf4rKi3rZlW4"}},{"cell_type":"markdown","source":["## Задание 1"],"metadata":{"id":"_iBq-HCoZw3c"}},{"cell_type":"code","source":["мы на одной из практик рассматривали вариант использования функции sum с доп. параметром для суммирования списков, т.е. в первом задании можно было так:\n","1\n","print(set(sum(ids.values(), [])))"],"metadata":{"id":"3FFzE2zIOt1w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","''' \n","Задание 1\n","Дана переменная, в которой хранится \n","словарь, содержащий гео-метки для каждого \n","пользователя (пример структуры данных \n","приведен ниже). Вам необходимо написать \n","программу, которая выведет на экран \n","множество уникальных гео-меток всех \n","пользователей.\n","\n","Пример работы программы:\n","\n","ids = {'user1': [213, 213, 213, 15, 213],\n","'user2': [54, 54, 119, 119, 119],\n","'user3': [213, 98, 98, 35]}\n","Результат: {98, 35, 15, 213, 54, 119}\n","\n","'''\n","#print(sorted({98, 35, 15, 213, 54, 119}))\n","\n","ids = {'user1': [213, 213, 213, 15, 213],\n","       'user2': [54, 54, 119, 119, 119],\n","       'user3': [213, 98, 98, 35]}\n","\n","# tags_u = set([]) #уникальные метки\n","# for tags in ids.values() : tags_u |= set(tags)\n","#    print(tags)\n","    \n","print(set(sum(ids.values(), [])))\n","\n","# print(tags_u)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BaJ9v4moZmuO","executionInfo":{"status":"ok","timestamp":1659623785024,"user_tz":-300,"elapsed":281,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"82b12903-f68f-4e41-b7a0-14972cc30719"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{98, 35, 15, 213, 54, 119}\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"n2eswX51sGJG"}},{"cell_type":"code","source":["во второй задаче ваша реализация жестко привязана к исходным данным. \n","Ваша задача написать универсальный алгоритм, который будет корректно работать \n","на любых данных аналогичной структуры. А что если запросы будут состоять \n","из любого количества слов от 1 до 1000? \n","Вы же не будете вручную прописывать каждый случай (как сейчас). \n","Просьба это поправить;"],"metadata":{"id":"nIGWTl2-O5GV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''\n","Задание 2\n","\n","Дана переменная, в которой хранится \n","список поисковых запросов пользователя \n","(пример структуры данных приведен ниже).\n","\n","Вам необходимо написать программу, \n","которая выведет на экран распределение \n","количества слов в запросах \n","в требуемом виде.\n","\n","Пример работы программы:\n","\n","queries = [\n","'смотреть сериалы онлайн',\n","'новости спорта',\n","'афиша кино',\n","'курс доллара',\n","'сериалы этим летом',\n","'курс по питону',\n","'сериалы про спорт'\n","]\n","\n","Результат:\n","\n","Поисковых запросов, содержащих 2 слов(а): 42.86%\n","\n","Поисковых запросов, содержащих 3 слов(а): 57.14%\n","'''"],"metadata":{"id":"FdoBNWmAhJnW","colab":{"base_uri":"https://localhost:8080/","height":110},"executionInfo":{"status":"ok","timestamp":1659244453572,"user_tz":-300,"elapsed":88,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"823f4b5c-2808-4be9-8416-15a2e038199b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nЗадание 2\\n\\nДана переменная, в которой хранится \\nсписок поисковых запросов пользователя \\n(пример структуры данных приведен ниже).\\n\\nВам необходимо написать программу, \\nкоторая выведет на экран распределение \\nколичества слов в запросах \\nв требуемом виде.\\n\\nПример работы программы:\\n\\nqueries = [\\n'смотреть сериалы онлайн',\\n'новости спорта',\\n'афиша кино',\\n'курс доллара',\\n'сериалы этим летом',\\n'курс по питону',\\n'сериалы про спорт'\\n]\\n\\nРезультат:\\n\\nПоисковых запросов, содержащих 2 слов(а): 42.86%\\n\\nПоисковых запросов, содержащих 3 слов(а): 57.14%\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["\n","\n","queries = [\n","'смотреть сериалы онлайн bhgf',\n","'новости спорта mnb jhg ytr oiu ytr oiu',\n","'афиша кино',\n","'курс доллара',\n","'сериалы этим летом jhgtr fds',\n","'курс по питону hjg uyt lkj fd',\n","'сериалы про спорт',\n","'kgh hgf kjh jhg hg jjhg',\n","'jllug'\n","]\n","\n","counter = { }\n","\n","for str in queries : \n","    l = len(str.split())\n","#    if n not in counter : counter[n] = 0\n","#    print(len(str.split()) )\n","    counter[l] = counter.get(l,0) + 1\n","#    print(counter) \n","\n","for n in counter :\n","#    print(n, counter[n] )\n","    mean_proc = round( ((counter[n]/ len(queries)) *100), 2)\n","    print(f'Поисковых запросов, содержащих {n} слов(а): {mean_proc}%')\n","\n","#counter"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7zmfcjbdtFPX","executionInfo":{"status":"ok","timestamp":1659624697249,"user_tz":-300,"elapsed":15,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"e5d59610-4431-4fae-edc4-39f43da2d4ea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поисковых запросов, содержащих 4 слов(а): 11.11%\n","Поисковых запросов, содержащих 8 слов(а): 11.11%\n","Поисковых запросов, содержащих 2 слов(а): 22.22%\n","Поисковых запросов, содержащих 5 слов(а): 11.11%\n","Поисковых запросов, содержащих 7 слов(а): 11.11%\n","Поисковых запросов, содержащих 3 слов(а): 11.11%\n","Поисковых запросов, содержащих 6 слов(а): 11.11%\n","Поисковых запросов, содержащих 1 слов(а): 11.11%\n"]}]},{"cell_type":"markdown","source":["#Задание 3"],"metadata":{"id":"E4N83RausHGL"}},{"cell_type":"code","source":["'''\n","Задание 3\n","Дана переменная, в которой хранится \n","информация о затратах и доходе рекламных \n","кампаний по различным источникам. \n","\n","Необходимо дополнить исходную структуру \n","показателем ROI, который рассчитаем \n","по формуле: \n","\n","(revenue / cost - 1) * 100\n","\n","Пример работы программы:\n","\n","results = {\n","'vk': {'revenue': 103, 'cost': 98},\n","'yandex': {'revenue': 179, 'cost': 153},\n","'facebook': {'revenue': 103, 'cost': 110},\n","'adwords': {'revenue': 35, 'cost': 34},\n","'twitter': {'revenue': 11, 'cost': 24},\n","}\n","\n","Результат:\n","\n","{'adwords': {'revenue': 35, 'cost': 34, 'ROI': 2.94},\n","'facebook': {'revenue': 103, 'cost': 110, 'ROI': -6.36},\n","'twitter': {'revenue': 11, 'cost': 24, 'ROI': -54.17},\n","'vk': {'revenue': 103, 'cost': 98, 'ROI': 5.1},\n","'yandex': {'revenue': 179, 'cost': 153, 'ROI': 16.99}}\n","'''"],"metadata":{"id":"Px__iOn8ycO6","colab":{"base_uri":"https://localhost:8080/","height":147},"executionInfo":{"status":"ok","timestamp":1659244453575,"user_tz":-300,"elapsed":77,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"28cdf7e5-2945-4614-c178-5bf01b0bcb86"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nЗадание 3\\nДана переменная, в которой хранится \\nинформация о затратах и доходе рекламных \\nкампаний по различным источникам. \\n\\nНеобходимо дополнить исходную структуру \\nпоказателем ROI, который рассчитаем \\nпо формуле: \\n\\n(revenue / cost - 1) * 100\\n\\nПример работы программы:\\n\\nresults = {\\n'vk': {'revenue': 103, 'cost': 98},\\n'yandex': {'revenue': 179, 'cost': 153},\\n'facebook': {'revenue': 103, 'cost': 110},\\n'adwords': {'revenue': 35, 'cost': 34},\\n'twitter': {'revenue': 11, 'cost': 24},\\n}\\n\\nРезультат:\\n\\n{'adwords': {'revenue': 35, 'cost': 34, 'ROI': 2.94},\\n'facebook': {'revenue': 103, 'cost': 110, 'ROI': -6.36},\\n'twitter': {'revenue': 11, 'cost': 24, 'ROI': -54.17},\\n'vk': {'revenue': 103, 'cost': 98, 'ROI': 5.1},\\n'yandex': {'revenue': 179, 'cost': 153, 'ROI': 16.99}}\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["results = {\n","'vk': {'revenue': 103, 'cost': 98},\n","'yandex': {'revenue': 179, 'cost': 153},\n","'facebook': {'revenue': 103, 'cost': 110},\n","'adwords': {'revenue': 35, 'cost': 34},\n","'twitter': {'revenue': 11, 'cost': 24},\n","}\n","\n","for camp, info in results.items():\n","  #  print(results)\n","  #  print(camp)\n","  #  print(info)\n","  #  print(results[camp])\n","  #  print(info['revenue'])\n","  #  print(info['cost'])\n","    \n","    info['ROI'] = round( ( info['revenue']/info['cost'] -1) *100, 2)\n","#    print(n)\n","#    info['ROI'] = n\n","#    print(results[camp])\n","\n","#    break\n","\n","print(results)\n"],"metadata":{"id":"4XdZ7zomycw3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659244453577,"user_tz":-300,"elapsed":76,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"e2a629ca-fe12-45e1-d32f-585a44d9d422"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'vk': {'revenue': 103, 'cost': 98, 'ROI': 5.1}, 'yandex': {'revenue': 179, 'cost': 153, 'ROI': 16.99}, 'facebook': {'revenue': 103, 'cost': 110, 'ROI': -6.36}, 'adwords': {'revenue': 35, 'cost': 34, 'ROI': 2.94}, 'twitter': {'revenue': 11, 'cost': 24, 'ROI': -54.17}}\n"]}]},{"cell_type":"markdown","source":["#Задание 4"],"metadata":{"id":"18sPN_JJydHK"}},{"cell_type":"code","source":["у 4 задачи есть еще много интересных способов решения, если будет интересно, \n","можете почитать вот этот тред на stackoverflow: \n","https://stackoverflow.com/questions/268272/getting-key-with-maximum-value-in-dictionary\n","\n"],"metadata":{"id":"4wFgfZjnPJdm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''\n","Задание 4\n","Дана переменная, в которой хранится \n","статистика рекламных каналов по объемам \n","продаж (пример структуры данных приведен \n","ниже). \n","Напишите программу, которая возвращает \n","название канала с максимальным объемом \n","продаж.\n","\n","Пример работы программы:\n","\n","stats = {'facebook': 55, 'yandex': 115, 'vk': 120, 'google': 99, 'email': 42, 'ok': 98}\n","\n","Результат: Максимальный объем продаж на рекламном канале: vk\n","'''"],"metadata":{"id":"0FQkyvW1CLRb","colab":{"base_uri":"https://localhost:8080/","height":91},"executionInfo":{"status":"ok","timestamp":1659244453581,"user_tz":-300,"elapsed":74,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"57bfd62d-5265-4a64-b6a5-aa4cbfed243c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nЗадание 4\\nДана переменная, в которой хранится \\nстатистика рекламных каналов по объемам \\nпродаж (пример структуры данных приведен \\nниже). \\nНапишите программу, которая возвращает \\nназвание канала с максимальным объемом \\nпродаж.\\n\\nПример работы программы:\\n\\nstats = {'facebook': 55, 'yandex': 115, 'vk': 120, 'google': 99, 'email': 42, 'ok': 98}\\n\\nРезультат: Максимальный объем продаж на рекламном канале: vk\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["stats = {'facebook': 55, 'yandex': 115, 'vk': 120, 'google': 99, 'email': 42, 'ok': 98}\n","\n","l = [key for key in stats if stats[key] == max(stats.values())]\n","print(f'Максимальный объем продаж на рекламном канале: {l[0]}')\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"77FszHrjCLhf","executionInfo":{"status":"ok","timestamp":1659244453583,"user_tz":-300,"elapsed":72,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"ccf4b919-d288-4a2e-bb28-b0150273b6fd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Максимальный объем продаж на рекламном канале: vk\n"]}]},{"cell_type":"markdown","source":["#Задание 5"],"metadata":{"id":"vzUg9rxtHOCa"}},{"cell_type":"code","source":["'''\n","Задание 5 (необязательно)\n","\n","Дан список произвольной длины. \n","Необходимо написать код, который \n","на основе исходного списка составит \n","словарь такого уровня вложенности, \n","какова длина исхондого списка.\n","\n","Примеры работы программы:\n","\n","my_list = ['2018-01-01', 'yandex', 'cpc', 100]\n","Результат: {'2018-01-01': {'yandex': {'cpc': 100}}}\n","\n","my_list = ['a', 'b', 'c', 'd', 'e', 'f']\n","Результат: {'a': {'b': {'c': {'d': {'e': 'f'}}}}}\n","'''"],"metadata":{"id":"my4DrEm_HOfU","colab":{"base_uri":"https://localhost:8080/","height":91},"executionInfo":{"status":"ok","timestamp":1659244453586,"user_tz":-300,"elapsed":71,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"005ce1a1-accb-4b0b-b492-0745bfa8a6c9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nЗадание 5 (необязательно)\\n\\nДан список произвольной длины. \\nНеобходимо написать код, который \\nна основе исходного списка составит \\nсловарь такого уровня вложенности, \\nкакова длина исхондого списка.\\n\\nПримеры работы программы:\\n\\nmy_list = ['2018-01-01', 'yandex', 'cpc', 100]\\nРезультат: {'2018-01-01': {'yandex': {'cpc': 100}}}\\n\\nmy_list = ['a', 'b', 'c', 'd', 'e', 'f']\\nРезультат: {'a': {'b': {'c': {'d': {'e': 'f'}}}}}\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# my_list = ['a', 'b', 'c', 'd', 'e', 'f']\n","my_list = ['2018-01-01', 'yandex', 'cpc', 100]\n","\n","'''\n","list_a = ['a']\n","list_b = ['b']\n","list_c = ['c']\n","list_d = ['d']\n","list_e = ['e']\n","list_f = ['f']\n","\n","list_e = dict(zip(list_e,list_f))\n","print(list_e)\n","\n","list_d = { list_d[0] : list_e }\n","print(list_d)\n","'''\n","\n","# l = len(my_list)\n","\n","# result = {}\n","# for elem in my_list :\n","# #    print(elem)\n","#     result.setdefault(elem, elem.upper())\n","\n","# print(result)\n","\n","# print()\n","\n","for n in range(len(my_list)-2,-1,-1) :\n","    # elem = my_list[n]\n","    # print(my_list)\n","    # print(n)\n","    # print(my_list[n])\n","    # print(result[ my_list[n] ])\n","    # print(result[ my_list[n-1] ])\n","    \n","    my_list[n] = { my_list[n] : (my_list[n+1]) }\n","    del my_list[n+1]\n","    # print( my_list[n] )\n","    # print()\n","    \n","    \n","\n","print(my_list[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bnzIWkapHOqC","executionInfo":{"status":"ok","timestamp":1659626362724,"user_tz":-300,"elapsed":270,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"0ba1fb04-2335-428d-c119-90eee7ebba37"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2018-01-01\n","2018-01-01\n","{'2018-01-01': {'yandex': {'cpc': 100}}}\n"]}]},{"cell_type":"markdown","source":["#Задание 6"],"metadata":{"id":"r5flFR48HPEw"}},{"cell_type":"code","source":["можно было еще оптимизировать 6 задачу вот таким хитрым способом:\n","\n","numb_servings = int(input('Укажите количество порций: '))\n","quantity_book = {}\n","\n","for ingred_book in sum(cook_book.values(), []):\n","  ingred_key = (ingred_book['ingridient_name'], ingred_book['measure'])\n","  quantity_book[ingred_key] = quantity_book.get(ingred_key, 0) + ingred_book['quantity']\n","\n","for (ingred_name, measure), quantity in quantity_book.items():\n","  print(f'{ingred_name.capitalize()}: {quantity * numb_servings} {measure}')\n"],"metadata":{"id":"Be8RJ62VQLMI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''\n","Задание 6 (необязательно)\n","Дана книга рецептов с информацией о том, \n","сколько ингредиентов нужно для приготовления \n","блюда в расчете на одну порцию (пример данных \n","представлен ниже).\n","\n","Напишите программу, которая будет запрашивать \n","у пользователя количество порций для приготовления \n","этих блюд и отображать информацию о \n","суммарном количестве требуемых ингредиентов \n","в указанном виде.\n","\n","Внимание! Одинаковые ингридиенты с разными \n","размерностями нужно считать раздельно!\n","\n","Пример работы программы:\n","\n","cook_book = {\n","'салат': [\n","{'ingridient_name': 'сыр', 'quantity': 50, 'measure': 'гр'},\n","{'ingridient_name': 'томаты', 'quantity': 2, 'measure': 'шт'},\n","{'ingridient_name': 'огурцы', 'quantity': 20, 'measure': 'гр'},\n","{'ingridient_name': 'маслины', 'quantity': 10, 'measure': 'гр'},\n","{'ingridient_name': 'оливковое масло', 'quantity': 20, 'measure': 'мл'},\n","{'ingridient_name': 'салат', 'quantity': 10, 'measure': 'гр'},\n","{'ingridient_name': 'перец', 'quantity': 20, 'measure': 'гр'}\n","],\n","\n","'пицца': [\n","{'ingridient_name': 'сыр', 'quantity': 20, 'measure': 'гр'},\n","{'ingridient_name': 'колбаса', 'quantity': 30, 'measure': 'гр'},\n","{'ingridient_name': 'бекон', 'quantity': 30, 'measure': 'гр'},\n","{'ingridient_name': 'оливки', 'quantity': 10, 'measure': 'гр'},\n","{'ingridient_name': 'томаты', 'quantity': 20, 'measure': 'гр'},\n","{'ingridient_name': 'тесто', 'quantity': 100, 'measure': 'гр'},\n","],\n","\n","'лимонад': [\n","{'ingridient_name': 'лимон', 'quantity': 1, 'measure': 'шт'},\n","{'ingridient_name': 'вода', 'quantity': 200, 'measure': 'мл'},\n","{'ingridient_name': 'сахар', 'quantity': 10, 'measure': 'гр'},\n","{'ingridient_name': 'лайм', 'quantity': 20, 'measure': 'гр'},\n","]\n","}\n","\n","Введите количество порций:\n","3\n","\n","Результат:\n","\n","Сыр: 210 гр\n","Томаты: 6 шт\n","Огурцы: 60 гр\n","Маслины: 30 гр\n","Оливковое масло: 60 мл\n","Салат: 30 гр\n","Перец: 60 гр\n","Колбаса: 90 гр\n","Бекон: 90 гр\n","Оливки: 30 гр\n","Томаты: 60 гр\n","Тесто: 300 гр\n","Лимон: 3 шт\n","Вода: 600 мл\n","Сахар: 30 гр\n","Лайм: 60 гр\n","\n","П\n","'''"],"metadata":{"id":"NAtxy2UIHPUk","colab":{"base_uri":"https://localhost:8080/","height":184},"executionInfo":{"status":"ok","timestamp":1659244453590,"user_tz":-300,"elapsed":71,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"ede78f2d-a3c3-436d-8aec-1f0a5e10ad7a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nЗадание 6 (необязательно)\\nДана книга рецептов с информацией о том, \\nсколько ингредиентов нужно для приготовления \\nблюда в расчете на одну порцию (пример данных \\nпредставлен ниже).\\n\\nНапишите программу, которая будет запрашивать \\nу пользователя количество порций для приготовления \\nэтих блюд и отображать информацию о \\nсуммарном количестве требуемых ингредиентов \\nв указанном виде.\\n\\nВнимание! Одинаковые ингридиенты с разными \\nразмерностями нужно считать раздельно!\\n\\nПример работы программы:\\n\\ncook_book = {\\n'салат': [\\n{'ingridient_name': 'сыр', 'quantity': 50, 'measure': 'гр'},\\n{'ingridient_name': 'томаты', 'quantity': 2, 'measure': 'шт'},\\n{'ingridient_name': 'огурцы', 'quantity': 20, 'measure': 'гр'},\\n{'ingridient_name': 'маслины', 'quantity': 10, 'measure': 'гр'},\\n{'ingridient_name': 'оливковое масло', 'quantity': 20, 'measure': 'мл'},\\n{'ingridient_name': 'салат', 'quantity': 10, 'measure': 'гр'},\\n{'ingridient_name': 'перец', 'quantity': 20, 'measure': 'гр'}\\n],\\n\\n'пицца': [\\n{'ingridient_name': 'сыр', 'quantity': 20, 'measure': 'гр'},\\n{'ingridient_name': 'колбаса', 'quantity': 30, 'measure': 'гр'},\\n{'ingridient_name': 'бекон', 'quantity': 30, 'measure': 'гр'},\\n{'ingridient_name': 'оливки', 'quantity': 10, 'measure': 'гр'},\\n{'ingridient_name': 'томаты', 'quantity': 20, 'measure': 'гр'},\\n{'ingridient_name': 'тесто', 'quantity': 100, 'measure': 'гр'},\\n],\\n\\n'лимонад': [\\n{'ingridient_name': 'лимон', 'quantity': 1, 'measure': 'шт'},\\n{'ingridient_name': 'вода', 'quantity': 200, 'measure': 'мл'},\\n{'ingridient_name': 'сахар', 'quantity': 10, 'measure': 'гр'},\\n{'ingridient_name': 'лайм', 'quantity': 20, 'measure': 'гр'},\\n]\\n}\\n\\nВведите количество порций:\\n3\\n\\nРезультат:\\n\\nСыр: 210 гр\\nТоматы: 6 шт\\nОгурцы: 60 гр\\nМаслины: 30 гр\\nОливковое масло: 60 мл\\nСалат: 30 гр\\nПерец: 60 гр\\nКолбаса: 90 гр\\nБекон: 90 гр\\nОливки: 30 гр\\nТоматы: 60 гр\\nТесто: 300 гр\\nЛимон: 3 шт\\nВода: 600 мл\\nСахар: 30 гр\\nЛайм: 60 гр\\n\\nП\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["cook_book = {\n","'салат': [\n","{'ingridient_name': 'сыр', 'quantity': 50, 'measure': 'гр'},\n","{'ingridient_name': 'томаты', 'quantity': 2, 'measure': 'шт'},\n","{'ingridient_name': 'огурцы', 'quantity': 20, 'measure': 'гр'},\n","{'ingridient_name': 'маслины', 'quantity': 10, 'measure': 'гр'},\n","{'ingridient_name': 'оливковое масло', 'quantity': 20, 'measure': 'мл'},\n","{'ingridient_name': 'салат', 'quantity': 10, 'measure': 'гр'},\n","{'ingridient_name': 'перец', 'quantity': 20, 'measure': 'гр'}\n","],\n","\n","'пицца': [\n","{'ingridient_name': 'сыр', 'quantity': 20, 'measure': 'гр'},\n","{'ingridient_name': 'колбаса', 'quantity': 30, 'measure': 'гр'},\n","{'ingridient_name': 'бекон', 'quantity': 30, 'measure': 'гр'},\n","{'ingridient_name': 'оливки', 'quantity': 10, 'measure': 'гр'},\n","{'ingridient_name': 'томаты', 'quantity': 20, 'measure': 'гр'},\n","{'ingridient_name': 'тесто', 'quantity': 100, 'measure': 'гр'},\n","],\n","\n","'лимонад': [\n","{'ingridient_name': 'лимон', 'quantity': 1, 'measure': 'шт'},\n","{'ingridient_name': 'вода', 'quantity': 200, 'measure': 'мл'},\n","{'ingridient_name': 'сахар', 'quantity': 10, 'measure': 'гр'},\n","{'ingridient_name': 'лайм', 'quantity': 20, 'measure': 'гр'},\n","]\n","}\n"],"metadata":{"id":"XiZQnfiCHPe0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# result = {}\n","\n","# n = int(input('  Введите количество порций: '))\n","\n","# # for dish, items in cook_book.items() :\n","# for items in cook_book.values() :\n","# #    print(dish, items)\n","#     for ingr in items :\n","# #        print(ingr)\n","# #        print(ingr.keys())\n","# #        print(ingr.values())\n","#         name = ingr[\"ingridient_name\"]+'_'+ingr[\"measure\"]\n","#         result.setdefault(name, 0)\n","#         result[name] += ingr['quantity']*n\n","#         # print(result)\n","\n","# # print(result)\n","\n","# #выдать результат в столбик \"ингр: кол-во единиц\"\n","# for name_meas, quant in sorted(result.items()) : #взять данные из словаря,\n","#     # sorted для расположения одноименных рядом\n","#     name, meas = name_meas.split(sep='_')\n","#     print(f'{name.capitalize()}: {quant} {meas}')\n","    \n"],"metadata":{"id":"bqGQCLvjo54o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["result = {}\n","\n","for ingr in sum(cook_book.values(), []) : \n","    '''#сложили все словари ингридиентов в один список и берем по одному'''\n","    # print(ingr)\n","    ingr_key = (ingr[\"ingridient_name\"], ingr[\"measure\"]) \n","    '''# создали tuple из (имени и меры) и назвали его ключом'''\n","    # print(ingr_key)\n","    result[ingr_key] = result.get(ingr_key, 0) + ingr['quantity']\n","    '''сложили в один словарь с суммированием количества'''\n","    # print(result[ingr_key])\n","\n","# result\n","\n","for (name, meas), quant in sorted(result.items()) :\n","#     # sorted для расположения одноименных рядом\n","    print(f'{name.capitalize()}: {quant} {meas}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZFYhaVO6Wg4g","executionInfo":{"status":"ok","timestamp":1659626802558,"user_tz":-300,"elapsed":9,"user":{"displayName":"sky16 -","userId":"05095578596717194176"}},"outputId":"c4edf9ca-d38b-428b-f3cc-bb439178fe8e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Бекон: 30 гр\n","Вода: 200 мл\n","Колбаса: 30 гр\n","Лайм: 20 гр\n","Лимон: 1 шт\n","Маслины: 10 гр\n","Огурцы: 20 гр\n","Оливки: 10 гр\n","Оливковое масло: 20 мл\n","Перец: 20 гр\n","Салат: 10 гр\n","Сахар: 10 гр\n","Сыр: 70 гр\n","Тесто: 100 гр\n","Томаты: 20 гр\n","Томаты: 2 шт\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"colab":{"name":"PYDA_cycles_2_HW.ipynb\"","provenance":[{"file_id":"1iVui7JlZCNAxRn5chqXhrsEMnjx-tPOi","timestamp":1659212906918}],"collapsed_sections":["E4N83RausHGL","vzUg9rxtHOCa"]}},"nbformat":4,"nbformat_minor":0}